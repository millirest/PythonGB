# Напишите функцию print_operation_table(operation, num_rows, num_columns), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. 
# По умолчанию номер столбца и строки = 9.

# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).
# Если строк меньше двух, выдайте текст
# ОШИБКА! Размерности таблицы должны быть больше 2!.

# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, 
# как, например, у операции умножения.

# Между элементами должен быть 1 пробел, в конце строки пробел не нужен.
# Пример

# На входе:
# print_operation_table(lambda x, y: x * y, 3, 3)

# На выходе:

# 1 2 3
# 2 4 6 
# 3 6 9

# def print_operation_table(operation, num_rows, num_columns):
#     if num_rows < 2 or num_columns <2 : print ("ОШИБКА! Размерности таблицы должны быть больше 2!")
#     else:
#         for i in range(1,num_rows+1):
#             list1 = list()  
#             for j in range(1,num_columns+1):
#                 list1.append(operation(i,j))
#             print(*list1, sep=" ")

# print_operation_table(lambda x, y: x + y, 5, 5)


#Задача 2
# Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу.

# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) 
# в каждой фразе стихотворения одинаковое.
# Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами.
# Фразы отделяются друг от друга пробелами.

# Стихотворение  Винни-Пух передаст вам автоматически в переменную stroka в виде строки. 
# В ответе напишите Парам пам-пам, если с ритмом все в порядке и Пам парам, если с ритмом все не в порядке.
# Если фраза только одна, то ритм определить не получится и необходимо вывести: 
# Количество фраз должно быть больше одной!.

# Пример
# На входе:
# stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'

# На выходе:
# Парам пам-пам

#stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'

#stroka = 'пара-ра-рам рам-пам-папам па-ра-па-дам'

stroka = "по-русски говорят"

# Моё решение

def same_by(object):
    result = True
    #list1 = [x for x in object]
    for i in range(len(object)-1):
        if object[i] != object[i+1]:
            result = False
    return result

def Presence_Ritm(text):
    Ritm_list = list()
    slova = list(text.split(" "))
    if len(slova)<2: return print("Количество фраз должно быть больше одной!")
    for i in slova:
        s = 0
        for j in i:
            if j in 'уеыаоэяи':
                s += 1
        Ritm_list.append(s)
    if same_by(Ritm_list): print("Парам пам-пам")
    else:
        print("Пам парам")

Presence_Ritm(stroka)

# Идеальное решение

vowels = ['а', 'е', 'ё', 'и', 'й', 'о', 'у', 'ы', 'э', 'ю', 'я']
phrases = stroka.split()
if len(phrases) < 2:
 print('Количество фраз должно быть больше одной!')
else:
 countVowels = []

 for i in phrases:
  countVowels.append(len([x for x in i if x.lower() in vowels]))

 if countVowels.count(countVowels[0]) == len(countVowels):
  print('Парам пам-пам')
 else:
  print('Пам парам')